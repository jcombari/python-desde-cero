1
00:00:01,030 --> 00:00:06,740
Si algo tienen la mayoría de lenguajes de programación es que son muy quisquillosos con las instrucciones.

2
00:00:06,790 --> 00:00:12,250
Normalmente en nuestros programas pueden ocurrir varios tipos de fallos y siempre que ocurre uno pronto

3
00:00:12,290 --> 00:00:16,990
nos lanzará un aviso indicando que ha ocurrido algo extraordinario y que se ha detenido la ejecución

4
00:00:16,990 --> 00:00:17,880
del programa.

5
00:00:18,540 --> 00:00:24,150
Por ejemplo tenemos los errores sintácticos que están ligados a la sintaxis que es la escritura de las

6
00:00:24,150 --> 00:00:25,530
instrucciones.

7
00:00:25,530 --> 00:00:32,190
Si nos olvidamos de cerrar un paréntesis unas comillas describirlos dos puntos en un bloque tábula mostrar

8
00:00:32,190 --> 00:00:32,950
el código.

9
00:00:33,060 --> 00:00:35,330
Todo esto son errores sintácticos.

10
00:00:35,520 --> 00:00:37,310
Vamos a provocar alguno.

11
00:00:37,550 --> 00:00:44,070
Vamos a ir al tema 7 Lección 1 de errores y por ejemplo vamos a hacer un Prin.

12
00:00:44,610 --> 00:00:49,440
Hola pero sin pasarle el último paréntesis vamos a ejecutarlo.

13
00:00:49,640 --> 00:00:56,250
Y lo que tenemos es un error un error de sintaxis porque nos está diciendo que se ha acabado el fichero

14
00:00:56,270 --> 00:01:00,590
Esto significa filet y se esperaba que se cerrase con un paréntesis.

15
00:01:00,600 --> 00:01:03,060
Pero eso no ha llegado a ocurrir.

16
00:01:03,060 --> 00:01:08,700
La verdad es que en algunas ocasiones un error sintáctico como escribir mal una función puede ocasionar

17
00:01:08,760 --> 00:01:16,800
otro tipo de error como los errores de nombre si en lugar de poner Hola ponemos por ejemplo Pinet nos

18
00:01:16,800 --> 00:01:19,840
descuidamos la erre y lo ejecutamos.

19
00:01:20,220 --> 00:01:25,800
Nosotros hemos cometido un error sintáctico nos hemos descuidado de poner una erre.

20
00:01:25,890 --> 00:01:32,300
Sin embargo el lo que está esperando es una función llamada PIN y nos dice que no está definida.

21
00:01:32,940 --> 00:01:39,140
Pese a todos los errores sintácticos se pueden identificar fácilmente antes de ejecutar el programa.

22
00:01:39,180 --> 00:01:43,140
La mayoría de entornos de desarrollo nos avisan sobre la marcha de que algo no anda bien.

23
00:01:43,140 --> 00:01:48,600
Para que los reclamos y en el peor de los casos el programa simplemente lanzara el error con el pertinente

24
00:01:48,600 --> 00:01:49,890
aviso.

25
00:01:50,700 --> 00:01:56,220
Sin embargo hay otros errores que no se distinguen tan fácilmente porque a primera vista no hay nada

26
00:01:56,220 --> 00:02:03,210
mal son los errores semánticos que estos fallos van más ligados al sentido del uso algo que para nosotros

27
00:02:03,210 --> 00:02:04,210
debería ser correcto.

28
00:02:04,200 --> 00:02:10,110
La mayoría de situaciones pero que en algún momento bajo una determinada circunstancia puede no funcionar

29
00:02:10,110 --> 00:02:12,060
como se espera.

30
00:02:12,060 --> 00:02:17,550
Un ejemplo clásico de error semántico sucede cuando tenemos una lista con varios elementos y lo sacamos

31
00:02:17,550 --> 00:02:19,110
con el método pop.

32
00:02:19,740 --> 00:02:25,480
Vamos a crear una lista con tres elementos y vamos a sacarlos.

33
00:02:25,680 --> 00:02:32,120
Vamos a hacer un pop pop y otro pop.

34
00:02:32,970 --> 00:02:35,330
Ahora mismo la lista estará vacía.

35
00:02:36,030 --> 00:02:40,540
Qué sucedería entonces si intentamos hacer un pop en una lista que está vacía.

36
00:02:41,040 --> 00:02:48,810
Pues qué no salta un error un error de tipo índex error indicándonos que no podemos sacar un elemento

37
00:02:49,080 --> 00:02:50,840
de una lista que está vacía.

38
00:02:51,330 --> 00:02:54,710
Este tipo de errores puede que a primera vista se nos pasen.

39
00:02:54,710 --> 00:02:56,580
No los tenemos en cuenta.

40
00:02:56,940 --> 00:03:01,530
Por tanto está en nuestras manos prevenir que ocurran estas cosas.

41
00:03:01,530 --> 00:03:06,780
En este caso sería tan sencillo como comprobar si la longitud de una lista es mayor que cero antes de

42
00:03:06,780 --> 00:03:09,030
intentar sacar un elemento.

43
00:03:09,860 --> 00:03:13,750
Por ejemplo volviendo a declarar la lista.

44
00:03:15,110 --> 00:03:22,970
Antes de hacer un pop deberíamos de comprobar y fehlen de la lista es mayor que cero para asegurarnos

45
00:03:22,970 --> 00:03:28,020
de que al menos hay un elemento.

46
00:03:29,000 --> 00:03:34,650
Si lo ejecutamos un par de veces más la lista está vacía.

47
00:03:34,900 --> 00:03:36,570
Y si lo volvemos a ejecutar.

48
00:03:37,450 --> 00:03:39,720
Pues no ocurre nada.

49
00:03:40,240 --> 00:03:42,610
Por qué estamos previniendo ese pop.

50
00:03:42,640 --> 00:03:45,470
En el caso de que no haya ningún elemento.

51
00:03:46,590 --> 00:03:51,630
Otro ejemplo que ya conocemos ocurre cuando le un valor por teclado e intentamos realizar una operación

52
00:03:51,630 --> 00:03:54,620
matemática directamente sin convertirlo a un número.

53
00:03:54,630 --> 00:04:03,880
Por ejemplo vamos a leer un número por teclado imput que introduce un número.

54
00:04:09,610 --> 00:04:12,480
Le introducimos un número muy bien.

55
00:04:12,670 --> 00:04:14,610
Ahora vamos a declarar otro número.

56
00:04:14,770 --> 00:04:17,480
Por ejemplo un 4.

57
00:04:18,100 --> 00:04:24,740
Ahora vamos a escribir un Prin con el resultado de la operación de dividir por ejemplo n entre M

58
00:04:27,730 --> 00:04:30,990
Vamos a crear una cadena de caracteres formateada.

59
00:04:31,330 --> 00:04:46,300
Así diremos que esto es igual a esto de aquí lo vamos a pasar el formato n y la M y L que en CM vamos

60
00:04:46,300 --> 00:04:52,120
a mostrarlo y tenemos un error claro Hemos leído una cadena.

61
00:04:52,210 --> 00:04:56,350
Como ya sabéis estamos intentando dividir por un número.

62
00:04:56,380 --> 00:05:01,800
No se puede dividir una cadena por un número.

63
00:05:01,810 --> 00:05:06,640
En este caso ya sabemos que simplemente tenemos que asegurarnos de transformar la cadena o un número

64
00:05:06,850 --> 00:05:08,580
flotante un número decimal.

65
00:05:08,920 --> 00:05:14,950
Como ya hemos venido haciendo durante todo el curso por lo tanto lo único que tenemos que hacer es transformar

66
00:05:15,030 --> 00:05:21,020
a un float desde el principio el resultado de esta lectura por teclado.

67
00:05:21,160 --> 00:05:25,730
Luego signar esto es desde el principio.

68
00:05:26,140 --> 00:05:33,700
En esta ocasión si introducimos un 10 por ejemplo hace 10 lo convierta decimal lo dividen entre cuatro

69
00:05:33,700 --> 00:05:41,800
y nos muestra 2,5 todo correcto pero si el usuario no introduce un número y se introduce una cadena

70
00:05:41,800 --> 00:05:51,850
de caracteres por ejemplo Ah pues seguimos teniendo un error por qué no se puede convertir a un flotante

71
00:05:51,870 --> 00:05:54,970
o una cadena de texto contra esas.

72
00:05:55,330 --> 00:05:59,160
Y es que no hay una forma mágica de asegurarnos de que el usuario introduzca un número.

73
00:05:59,260 --> 00:06:01,770
Por eso salta el aviso y se detiene la ejecución.

74
00:06:02,590 --> 00:06:07,150
Habrá alguna forma entonces de adelantarnos a los hechos y crear un plan B para que no se detenga el

75
00:06:07,150 --> 00:06:08,180
programa.

76
00:06:08,680 --> 00:06:13,500
Pues sí creando estados de excepción que sigan ejecutándose aunque ocurra un error.

77
00:06:13,750 --> 00:06:16,070
Pero hablaremos de ello en la próxima elección.
