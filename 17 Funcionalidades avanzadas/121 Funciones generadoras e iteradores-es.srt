1
00:00:01,150 --> 00:00:07,830
En esta cuarta elección vamos a trabajar las funciones generadoras que no devoradoras y los integradores.

2
00:00:10,260 --> 00:00:15,210
Comenzamos por las funciones generadoras que están estrechamente relacionadas con los y tiradores pero

3
00:00:15,210 --> 00:00:21,570
primero tenemos que ver esto por regla general cuando queremos crear una lista de algún tipo.

4
00:00:21,570 --> 00:00:27,510
Lo que hacemos es crear la lista vacía y luego con un bucle varios elementos e ir añadiendo a la lista

5
00:00:27,510 --> 00:00:28,590
si cumplen una condición.

6
00:00:28,590 --> 00:00:38,640
Ya lo habíamos visto no podíamos hacerlo con comprensión de listas y número por número PIN y aquí pasándole

7
00:00:38,640 --> 00:00:48,030
una lista por ejemplo así y aquí pasandolo una condición solamente si el número módulo 2 es igual a

8
00:00:48,030 --> 00:00:48,320
cero.

9
00:00:48,330 --> 00:00:53,050
Es decir si es par por ejemplo aquí tenemos unos cuantos pares.

10
00:00:53,840 --> 00:01:00,090
También vimos cómo era posible utilizar la función Ranch para generar directamente la lista la memoria

11
00:01:00,770 --> 00:01:06,640
es decir sin tener que crearla en el propio código y así se interpretaba sobre la marcha.

12
00:01:06,860 --> 00:01:14,000
Una variante prácticamente igual pero utilizando el ranks podríamos poner aquí vale cero por ejemplo

13
00:01:14,050 --> 00:01:20,850
6 y tenemos exactamente lo mismo con este ranz.

14
00:01:20,900 --> 00:01:26,900
Bueno pues la verdad es que randis es una especie de función generadora por regla general las funciones

15
00:01:27,050 --> 00:01:34,250
devuelven un valor con Return pero la peculiaridad de los generadores es que van cediendo sobre la marcha

16
00:01:34,790 --> 00:01:37,190
los valores en tiempo de ejecución.

17
00:01:38,370 --> 00:01:43,790
La función generadora arranca cero 6 empieza cediendo el cero.

18
00:01:45,610 --> 00:01:53,300
Luego se procesa Halford se comprueba si es par o no si es parlo añade a la lista.

19
00:01:54,210 --> 00:02:00,740
Luego se vuelve a entrar en el ranks se procesa la siguiente iteración se accede al número 1.

20
00:02:00,900 --> 00:02:04,770
Se hace toda la comprobación como el número uno no es par.

21
00:02:04,780 --> 00:02:12,080
No se añade a la lista se continúa con el número 2 dentro del ranz Etcétera etcétera etcétera.

22
00:02:12,810 --> 00:02:17,670
Con esto se logra ocupar el mínimo espacio en la memoria y podemos generar listas de millones de elementos

23
00:02:17,670 --> 00:02:19,460
sin necesidad almacenarlos previamente.

24
00:02:19,460 --> 00:02:26,070
Esto ya lo vimos cuando trabajamos el Ranch pero lo que vamos a ver en esta lección es cómo crear una

25
00:02:26,070 --> 00:02:28,810
función generadora manual.

26
00:02:29,220 --> 00:02:32,350
Por ejemplo una función que genere.

27
00:02:33,120 --> 00:02:35,550
Un número indeterminado de pares.

28
00:02:35,670 --> 00:02:44,950
Nosotros le vamos a pasar enviamos todos los pares por ejemplo del cero hasta el número 10.

29
00:02:45,180 --> 00:02:48,110
Vamos a hacerlo vamos a hacer una función llamada pares.

30
00:02:49,200 --> 00:02:55,560
Le vamos a pasar un número que es el máximo hasta donde queremos llegar para este número.

31
00:02:55,810 --> 00:02:59,530
Y en Ransom por ejemplo vamos a utilizar un Range sin ningún problema.

32
00:02:59,970 --> 00:03:03,800
Hasta el Nmás1 recordar que se excluía el número.

33
00:03:03,810 --> 00:03:08,910
Por tanto si queremos llegar hasta ahí tenemos que sumarle un extra.

34
00:03:09,660 --> 00:03:11,270
Y aquí es cuando se hace la magia.

35
00:03:11,430 --> 00:03:17,890
If número Espar número módulo 2 es igual a cero.

36
00:03:18,360 --> 00:03:24,020
La magia se hace en este momento aquí vamos a ceder en cada iteración el número y lo guardasen return.

37
00:03:24,180 --> 00:03:30,280
Como haríamos normalmente haremos un Llegó del número.

38
00:03:31,460 --> 00:03:34,850
Y el ceder el número.

39
00:03:35,030 --> 00:03:42,520
Si por ejemplo ejecutamos esta función bares que nos digan los números pares del 0 al 10.

40
00:03:43,460 --> 00:03:50,150
Fijaros que lo que tenemos en lugar de una lista como cabría esperar que tendríamos aquí lo que obtenemos

41
00:03:50,150 --> 00:03:53,220
es un objeto de tipo generador.

42
00:03:53,530 --> 00:03:59,060
Estos objetos generadores se pueden recorrer de la misma forma que hacíamos utilizando el rancho con

43
00:03:59,060 --> 00:04:08,570
un Ford como si fuera una lista de números impares hasta el 10 números.

44
00:04:09,250 --> 00:04:12,670
Y aquí tenemos todos los pares del cero al 10.

45
00:04:14,300 --> 00:04:14,990
De acuerdo.

46
00:04:15,020 --> 00:04:21,590
Evidentemente también podemos utilizar la comprensión de listas sobre un generador número por número

47
00:04:21,730 --> 00:04:25,310
y en pares hasta el 10.

48
00:04:28,440 --> 00:04:34,450
Y ahí tenemos una lista generada al vuelo con nuestro generador de pares.

49
00:04:34,500 --> 00:04:39,740
Sin embargo el gran potencial de los generadores no es simplemente crear listas sino sería muy aburrido.

50
00:04:40,290 --> 00:04:45,970
De hecho como ya hemos visto el propio resultado no es una lista en sí mismo sino una secuencia integrable

51
00:04:46,050 --> 00:04:48,890
con un montón de características únicas.

52
00:04:48,900 --> 00:04:50,850
Esto que tenemos aquí.

53
00:04:50,850 --> 00:04:57,090
Por tanto las funciones generadoras devuelven un objeto que soporta un protocolo de iteración es decir

54
00:04:57,120 --> 00:04:58,670
son integradores.

55
00:04:58,720 --> 00:05:05,040
Esto que nos devuelven y que nos permiten hacer pues nos permiten controlar el proceso de generación

56
00:05:05,910 --> 00:05:11,370
teniendo en cuenta que cada vez que la función generadora de un elemento queda suspendida hasta que

57
00:05:11,370 --> 00:05:15,600
se retoma cuando se le pide el siguiente valor a generar.

58
00:05:15,930 --> 00:05:21,560
Así que vamos a tomar nuestro ejemplo de pares desde otra perspectiva como si fuera un integrador manual.

59
00:05:21,630 --> 00:05:25,500
Así veremos exactamente a lo que me estoy refiriendo.

60
00:05:25,620 --> 00:05:34,260
Vamos a guardar en pares por ejemplo el resultado de llamar al generador pares por ejemplo hasta el

61
00:05:34,260 --> 00:05:35,560
número 3.

62
00:05:35,850 --> 00:05:41,640
Muy bien vamos a centrarnos en conseguir el primer elemento de este integrador y eso lo podemos hacer

63
00:05:41,640 --> 00:05:46,660
porque recordad que el generador va cediendo con los elementos.

64
00:05:46,710 --> 00:05:49,370
Por tanto podemos recorrer uno a uno.

65
00:05:49,410 --> 00:05:55,420
Este proceso de generación y para hacerlo vamos a utilizar la función integrada en Next.

66
00:05:55,830 --> 00:06:04,940
De esta forma Next que si le pasamos el generador o la secuencia integrable nos consigue el primer elemento.

67
00:06:05,220 --> 00:06:12,760
Si volvemos a ejecutarlo fijaros nos consigue el segundo elemento que es el número 2 nos recuerda esto

68
00:06:12,810 --> 00:06:19,630
un poco al puntero de los ficheros cuando leíamos una línea el puntero pasaba a la siguiente y así sucesivamente.

69
00:06:19,630 --> 00:06:21,790
Pues aquí es muy parecido.

70
00:06:22,110 --> 00:06:26,620
Ahora imaginaros que pasaría si ejecutamos Next otra vez.

71
00:06:26,640 --> 00:06:31,230
Ya sabemos que entre el 0 y el 3 solamente tenemos el 0 y el 2 como pares.

72
00:06:31,470 --> 00:06:39,570
Fijaros lo que sucede pues nos da un error y nos devuelve el error stop y traición.

73
00:06:39,630 --> 00:06:46,230
Claro se ha acabado la secuencia ya no hay más pares así que toma nota de este error y capturas de esta

74
00:06:46,230 --> 00:06:47,090
excepción.

75
00:06:47,130 --> 00:06:52,170
Si vais a utilizarla sin saber exactamente cuándo se va acabar de iterar.

76
00:06:53,020 --> 00:07:01,050
Entonces la pregunta que nos queda ahora es sólo es posible iterar secuencias generadas al vuelo utilizando

77
00:07:01,050 --> 00:07:02,990
generadores.

78
00:07:03,010 --> 00:07:10,410
Bueno vamos a probar por ejemplo una lista se podrá recorrer con un integrador una lista por ejemplo

79
00:07:10,620 --> 00:07:11,860
de cinco elementos.

80
00:07:12,000 --> 00:07:16,440
Si intentamos hacer un next de esta lista nos va a sacar el uno.

81
00:07:17,630 --> 00:07:18,870
Pues no se puede.

82
00:07:19,360 --> 00:07:23,430
Y una cadena nos podemos iterar una cadena por ejemplo.

83
00:07:23,710 --> 00:07:24,390
Hola.

84
00:07:24,790 --> 00:07:35,470
Con NEX podemos sacar la H de esta cadena pues no se puede porque tanto la lista como la string la cadena

85
00:07:35,950 --> 00:07:39,410
no son integradores no son integrables.

86
00:07:39,670 --> 00:07:44,980
La verdad es que no podemos iterar ninguna colección como si fuera una secuencia pero sin embargo hay

87
00:07:44,980 --> 00:07:50,600
una función muy interesante que nos permite convertir estas colecciones hay.

88
00:07:50,720 --> 00:07:54,200
Y es la función ITER también integrada.

89
00:07:54,400 --> 00:08:01,580
Si intentamos ahora convertir esta lista a una lista integrable.

90
00:08:02,390 --> 00:08:11,510
De esta forma con la función ITER repasamos esta lista que tendremos el lista integrable es un integrador.

91
00:08:11,620 --> 00:08:13,880
Como vemos aquí de tipo lista.

92
00:08:14,690 --> 00:08:21,700
Y ahora lo que podemos hacer es utilizar el NEX dentro de esta lista integrable el 1.

93
00:08:23,390 --> 00:08:26,710
El 2 3 y 4 etc..

94
00:08:27,210 --> 00:08:34,630
Y lo mismo si fuera una cadena integrable a copiar la que tenemos aquí vamos a transformar una cadena

95
00:08:35,350 --> 00:08:40,660
miserable y tener cadena.

96
00:08:42,790 --> 00:08:51,640
Y con el NEX primer elemento queda pasado el segundo elemento o tercer elemento la ltte.

97
00:08:52,060 --> 00:08:52,420
Muy bien.

98
00:08:52,450 --> 00:08:56,180
Ahora ya sabemos que las funciones generadoras como utilizarlas.

99
00:08:56,410 --> 00:09:03,010
Y también cómo convertir algunos objetos a tiradores o sugiero probar por vuestra cuenta más colecciones.

100
00:09:03,010 --> 00:09:05,940
A ver si encontráis alguna más que se pueda iterar.
